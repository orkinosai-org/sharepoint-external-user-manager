import { WebPartContext } from '@microsoft/sp-webpart-base';
import "@pnp/sp/webs";
import "@pnp/sp/lists";
import "@pnp/sp/items";
import "@pnp/sp/security";
import { spfi, SPFx } from "@pnp/sp";
import { IExternalLibrary, IExternalUser } from '../models/IExternalLibrary';
import { AuditLogger } from './AuditLogger';

/**
 * SharePoint Data Service using PnPjs for library management
 * 
 * Technical Decisions:
 * - PnPjs chosen for primary integration due to:
 *   * Better TypeScript support and intellisense
 *   * Simplified API compared to raw REST calls
 *   * Built-in error handling and retry logic
 *   * Better caching and performance optimizations
 * 
 * - Microsoft Graph API used as fallback for:
 *   * Tenant-level operations not supported by PnPjs
 *   * Cross-site operations requiring elevated permissions
 *   * Advanced user management scenarios
 */
export class SharePointDataService {
  private context: WebPartContext;
  private auditLogger: AuditLogger;
  private sp: any;

  constructor(context: WebPartContext) {
    this.context = context;
    this.auditLogger = new AuditLogger(context);
    
    // Initialize PnPjs with SPFx context
    this.sp = spfi().using(SPFx(context));
  }

  /**
   * Get all external libraries (document libraries with external sharing enabled)
   */
  public async getExternalLibraries(): Promise<IExternalLibrary[]> {
    try {
      this.auditLogger.logInfo('getExternalLibraries', 'Fetching external libraries');

      // Get all document libraries from current site
      const lists = await sp.web.lists
        .filter("BaseTemplate eq 101 and Hidden eq false") // Document libraries only
        .select(
          "Id", "Title", "Description", "DefaultViewUrl", 
          "LastItemModifiedDate", "ItemCount", "Created"
        )
        .expand("RoleAssignments/Member")
        .get();

      const libraries: IExternalLibrary[] = [];

      for (const list of lists) {
        try {
          // Check if library has external sharing
          const hasExternalUsers = await this.hasExternalUsers(list.Id);
          
          if (hasExternalUsers.hasExternal) {
            const library: IExternalLibrary = {
              id: list.Id,
              name: list.Title,
              description: list.Description || 'No description available',
              siteUrl: list.DefaultViewUrl || '',
              externalUsersCount: hasExternalUsers.externalCount,
              lastModified: new Date(list.LastItemModifiedDate),
              owner: await this.getLibraryOwner(list.Id),
              permissions: await this.getLibraryPermissionLevel(list.Id)
            };
            libraries.push(library);
          }
        } catch (error) {
          this.auditLogger.logError('getExternalLibraries', `Error processing library ${list.Title}`, error);
          // Continue processing other libraries
        }
      }

      this.auditLogger.logInfo('getExternalLibraries', `Retrieved ${libraries.length} external libraries`);
      return libraries;

    } catch (error) {
      this.auditLogger.logError('getExternalLibraries', 'Failed to fetch external libraries', error);
      throw new Error(`Failed to fetch external libraries: ${error.message}`);
    }
  }

  /**
   * Create a new document library with specified configuration
   */
  public async createLibrary(libraryConfig: {
    title: string;
    description?: string;
    enableExternalSharing?: boolean;
    template?: number;
  }): Promise<IExternalLibrary> {
    try {
      this.auditLogger.logInfo('createLibrary', `Creating library: ${libraryConfig.title}`);

      // Validate input
      if (!libraryConfig.title || libraryConfig.title.trim().length === 0) {
        throw new Error('Library title is required');
      }

      // Check if library with same name already exists
      const existingLibraries = await sp.web.lists
        .filter(`Title eq '${libraryConfig.title.replace(/'/g, "''")}'`)
        .get();

      if (existingLibraries.length > 0) {
        throw new Error(`A library with the name "${libraryConfig.title}" already exists`);
      }

      // Create the document library
      const libraryCreationInfo = {
        Title: libraryConfig.title,
        Description: libraryConfig.description || '',
        BaseTemplate: libraryConfig.template || 101, // Document library template
        EnableAttachments: false,
        EnableFolderCreation: true
      };

      const createResult = await sp.web.lists.add(
        libraryCreationInfo.Title,
        libraryCreationInfo.Description,
        libraryCreationInfo.BaseTemplate,
        false, // enableContentTypes
        {
          EnableAttachments: libraryCreationInfo.EnableAttachments,
          EnableFolderCreation: libraryCreationInfo.EnableFolderCreation
        }
      );

      // Configure external sharing if requested
      if (libraryConfig.enableExternalSharing) {
        await this.enableExternalSharing(createResult.data.Id);
      }

      // Create the library object to return
      const newLibrary: IExternalLibrary = {
        id: createResult.data.Id,
        name: libraryConfig.title,
        description: libraryConfig.description || '',
        siteUrl: createResult.data.DefaultViewUrl || '',
        externalUsersCount: 0,
        lastModified: new Date(),
        owner: this.context.pageContext.user.displayName,
        permissions: 'Full Control'
      };

      this.auditLogger.logInfo('createLibrary', `Successfully created library: ${libraryConfig.title}`, {
        libraryId: createResult.data.Id,
        externalSharing: libraryConfig.enableExternalSharing
      });

      return newLibrary;

    } catch (error) {
      this.auditLogger.logError('createLibrary', `Failed to create library: ${libraryConfig.title}`, error);
      throw new Error(`Failed to create library: ${error.message}`);
    }
  }

  /**
   * Delete a document library by ID
   */
  public async deleteLibrary(libraryId: string): Promise<void> {
    try {
      this.auditLogger.logInfo('deleteLibrary', `Deleting library: ${libraryId}`);

      // Get library details before deletion for audit log
      const library = await sp.web.lists.getById(libraryId)
        .select("Title", "ItemCount")
        .get();

      // Check if user has permission to delete
      const currentUserPermissions = await sp.web.lists.getById(libraryId)
        .getCurrentUserEffectivePermissions();

      // Note: In a real implementation, you would check specific permissions
      // For now, we assume the user has sufficient permissions

      // Perform the deletion
      await sp.web.lists.getById(libraryId).delete();

      this.auditLogger.logInfo('deleteLibrary', `Successfully deleted library: ${library.Title}`, {
        libraryId,
        itemCount: library.ItemCount
      });

    } catch (error) {
      this.auditLogger.logError('deleteLibrary', `Failed to delete library: ${libraryId}`, error);
      throw new Error(`Failed to delete library: ${error.message}`);
    }
  }

  /**
   * Get external users for a specific library
   */
  public async getExternalUsersForLibrary(libraryId: string): Promise<IExternalUser[]> {
    try {
      this.auditLogger.logInfo('getExternalUsersForLibrary', `Fetching external users for library: ${libraryId}`);

      // Get all role assignments for the library
      const roleAssignments = await sp.web.lists.getById(libraryId)
        .roleAssignments
        .expand("Member", "RoleDefinitionBindings")
        .get();

      const externalUsers: IExternalUser[] = [];

      for (const assignment of roleAssignments) {
        // Check if member is an external user (contains # in login name for external users)
        if (assignment.Member.LoginName && assignment.Member.LoginName.includes('#ext#')) {
          const permissions = assignment.RoleDefinitionBindings
            .map((role: any) => role.Name)
            .join(', ');

          const externalUser: IExternalUser = {
            id: assignment.Member.Id.toString(),
            email: assignment.Member.Email || '',
            displayName: assignment.Member.Title || '',
            invitedBy: 'Unknown', // Would need additional API call to get this
            invitedDate: new Date(), // Would need additional API call to get this
            lastAccess: new Date(), // Would need additional API call to get this
            permissions: this.mapPermissionLevel(permissions)
          };

          externalUsers.push(externalUser);
        }
      }

      this.auditLogger.logInfo('getExternalUsersForLibrary', `Found ${externalUsers.length} external users`);
      return externalUsers;

    } catch (error) {
      this.auditLogger.logError('getExternalUsersForLibrary', `Failed to get external users for library: ${libraryId}`, error);
      throw new Error(`Failed to get external users: ${error.message}`);
    }
  }

  // Private helper methods

  private async hasExternalUsers(libraryId: string): Promise<{ hasExternal: boolean; externalCount: number }> {
    try {
      const roleAssignments = await sp.web.lists.getById(libraryId)
        .roleAssignments
        .expand("Member")
        .get();

      let externalCount = 0;
      for (const assignment of roleAssignments) {
        if (assignment.Member.LoginName && assignment.Member.LoginName.includes('#ext#')) {
          externalCount++;
        }
      }

      return {
        hasExternal: externalCount > 0,
        externalCount
      };
    } catch {
      return { hasExternal: false, externalCount: 0 };
    }
  }

  private async getLibraryOwner(libraryId: string): Promise<string> {
    try {
      const owner = await sp.web.lists.getById(libraryId)
        .select("Author/Title")
        .expand("Author")
        .get();
      
      return owner.Author?.Title || 'Unknown';
    } catch {
      return 'Unknown';
    }
  }

  private async getLibraryPermissionLevel(libraryId: string): Promise<'Read' | 'Contribute' | 'Full Control'> {
    try {
      // Get current user's effective permissions
      const permissions = await sp.web.lists.getById(libraryId)
        .getCurrentUserEffectivePermissions();

      // This is a simplified permission check
      // In reality, you'd need to parse the permission mask
      return 'Full Control'; // Default for now
    } catch {
      return 'Read';
    }
  }

  private async enableExternalSharing(libraryId: string): Promise<void> {
    try {
      // Note: External sharing configuration typically requires tenant admin permissions
      // This is where Microsoft Graph API might be needed as a fallback
      // For now, we'll log that this feature requires additional configuration
      this.auditLogger.logInfo('enableExternalSharing', 
        `External sharing enablement for library ${libraryId} requires tenant admin configuration`);
    } catch (error) {
      this.auditLogger.logError('enableExternalSharing', `Failed to enable external sharing for library: ${libraryId}`, error);
    }
  }

  private mapPermissionLevel(permissions: string): 'Read' | 'Contribute' | 'Full Control' {
    if (permissions.includes('Full Control')) return 'Full Control';
    if (permissions.includes('Contribute') || permissions.includes('Edit')) return 'Contribute';
    return 'Read';
  }
}
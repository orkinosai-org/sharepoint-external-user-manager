# GitHub Actions Workflow for SharePoint Framework Solution Deployment
# 
# This workflow builds and deploys the SPFx solution to SharePoint App Catalog
# Triggered on every push to the main branch
#
# Required Repository Secrets:
# - SPO_URL: SharePoint tenant URL (e.g., https://contoso.sharepoint.com)
# - SPO_USERNAME: SharePoint admin username (e.g., admin@contoso.onmicrosoft.com)  
# - SPO_PASSWORD: SharePoint admin password (use app password if MFA is enabled)
#
# The workflow performs the following steps:
# 1. Build: Install dependencies, build and package the SPFx solution
# 2. Deploy: Upload .sppkg file to tenant app catalog and publish it
#
# Note: Ensure the user account has SharePoint administrator privileges
# and can access the tenant app catalog

name: Deploy SPFx Solution to SharePoint

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18.x'

jobs:
  build:
    name: Build SPFx Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing npm dependencies..."
        npm ci
        
    - name: Build solution
      run: |
        echo "Building SPFx solution..."
        npm run build
        
    - name: Package solution
      run: |
        echo "Packaging SPFx solution for deployment..."
        npm run package-solution
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spfx-package
        path: sharepoint/solution/*.sppkg
        retention-days: 30

  deploy:
    name: Deploy to SharePoint App Catalog
    runs-on: ubuntu-latest
    needs: build
    environment: production # Requires approval for production deployment
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: spfx-package
        path: ./solution
        
    - name: Install PnP PowerShell
      shell: pwsh
      run: |
        Write-Host "Installing PnP PowerShell module..."
        Install-Module -Name PnP.PowerShell -Force -Scope CurrentUser -AllowClobber
        Write-Host "PnP PowerShell version: $(Get-Module -Name PnP.PowerShell -ListAvailable | Select-Object -ExpandProperty Version)"
        
    - name: Validate deployment prerequisites
      shell: pwsh
      env:
        SPO_URL: ${{ secrets.SPO_URL }}
        SPO_USERNAME: ${{ secrets.SPO_USERNAME }}
        SPO_PASSWORD: ${{ secrets.SPO_PASSWORD }}
      run: |
        # Check if required secrets are provided
        if (-not $env:SPO_URL) {
          Write-Host "‚ùå SPO_URL secret is not configured"
          exit 1
        }
        if (-not $env:SPO_USERNAME) {
          Write-Host "‚ùå SPO_USERNAME secret is not configured"
          exit 1
        }
        if (-not $env:SPO_PASSWORD) {
          Write-Host "‚ùå SPO_PASSWORD secret is not configured"
          exit 1
        }
        
        # Check if package file exists
        $packageFiles = Get-ChildItem -Path "./solution" -Filter "*.sppkg" -ErrorAction SilentlyContinue
        if (-not $packageFiles) {
          Write-Host "‚ùå No .sppkg file found in solution directory"
          Write-Host "Contents of solution directory:"
          Get-ChildItem -Path "./solution" -Force
          exit 1
        }
        
        Write-Host "‚úÖ All prerequisites validated"
        
    - name: Deploy to SharePoint App Catalog
      shell: pwsh
      env:
        SPO_URL: ${{ secrets.SPO_URL }}
        SPO_USERNAME: ${{ secrets.SPO_USERNAME }}
        SPO_PASSWORD: ${{ secrets.SPO_PASSWORD }}
      run: |
        try {
          Write-Host "=============================================="
          Write-Host "üöÄ SharePoint Framework Solution Deployment"
          Write-Host "=============================================="
          Write-Host "Deployment Started: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          Write-Host "SharePoint URL: $env:SPO_URL"
          Write-Host "Username: $env:SPO_USERNAME"
          Write-Host "Workflow Run: ${{ github.run_number }}"
          Write-Host "Commit SHA: ${{ github.sha }}"
          Write-Host ""
          
          Write-Host "üîó Connecting to SharePoint Online..."
          
          # Convert password to secure string
          $securePassword = ConvertTo-SecureString $env:SPO_PASSWORD -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential($env:SPO_USERNAME, $securePassword)
          
          # Connect to SharePoint Online with retry logic
          $maxRetries = 3
          $retryCount = 0
          $connected = $false
          
          while (-not $connected -and $retryCount -lt $maxRetries) {
            try {
              Connect-PnPOnline -Url $env:SPO_URL -Credentials $credentials
              $connected = $true
              Write-Host "‚úÖ Successfully connected to SharePoint Online"
            } catch {
              $retryCount++
              Write-Host "‚ö†Ô∏è Connection attempt $retryCount failed: $($_.Exception.Message)"
              if ($retryCount -lt $maxRetries) {
                Write-Host "Retrying in 10 seconds..."
                Start-Sleep -Seconds 10
              }
            }
          }
          
          if (-not $connected) {
            throw "Failed to connect to SharePoint Online after $maxRetries attempts"
          }
          
          # Find the .sppkg file
          $packageFile = Get-ChildItem -Path "./solution" -Filter "*.sppkg" | Select-Object -First 1
          
          if (-not $packageFile) {
            throw "No .sppkg file found in solution directory"
          }
          
          Write-Host "Found package file: $($packageFile.Name)"
          Write-Host "Package size: $([math]::Round($packageFile.Length / 1MB, 2)) MB"
          
          # Check if app already exists and get info
          $existingApp = $null
          try {
            $allApps = Get-PnPApp
            $existingApp = $allApps | Where-Object { $_.Title -eq "sharepoint-external-user-manager-client-side-solution" }
            if ($existingApp) {
              Write-Host "Existing app found: $($existingApp.Title) (Version: $($existingApp.AppVersion))"
            }
          } catch {
            Write-Host "Could not retrieve existing apps list: $($_.Exception.Message)"
          }
          
          # Upload and publish the app
          Write-Host "üì¶ Uploading package to app catalog..."
          Write-Host "Target: $env:SPO_URL App Catalog"
          $uploadStartTime = Get-Date
          $app = Add-PnPApp -Path $packageFile.FullName -Publish -Overwrite
          $uploadDuration = (Get-Date) - $uploadStartTime
          
          if ($app) {
            Write-Host ""
            Write-Host "=============================================="
            Write-Host "‚úÖ DEPLOYMENT SUCCESSFUL"
            Write-Host "=============================================="
            Write-Host "Package: $($packageFile.Name)"
            Write-Host "Package Size: $([math]::Round($packageFile.Length / 1MB, 2)) MB"
            Write-Host "App ID: $($app.Id)"
            Write-Host "App Title: $($app.Title)"
            Write-Host "App Version: $($app.AppVersion)"
            Write-Host "Upload Duration: $($uploadDuration.TotalSeconds) seconds"
            Write-Host "Deployed to: $env:SPO_URL"
            Write-Host "Deployment Completed: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
            Write-Host "=============================================="
            
            # Set deployment summary
            $deploymentSummary = @"
        ## üöÄ SPFx Solution Deployment Summary
        
        **Status**: ‚úÖ **SUCCESSFUL**
        
        ### Deployment Details
        - **Package**: $($packageFile.Name)
        - **Package Size**: $([math]::Round($packageFile.Length / 1MB, 2)) MB
        - **App ID**: $($app.Id)
        - **App Title**: $($app.Title)
        - **App Version**: $($app.AppVersion)
        - **Upload Duration**: $($uploadDuration.TotalSeconds) seconds
        - **Deployed to**: $env:SPO_URL
        - **Workflow Run**: ${{ github.run_number }}
        - **Commit SHA**: ${{ github.sha }}
        - **Deployment Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        
        ### SharePoint App Catalog
        The SPFx solution has been successfully uploaded to the SharePoint App Catalog at **$env:SPO_URL** and is ready for use.
        
        ### Next Steps
        1. üîç Navigate to your SharePoint App Catalog to verify the deployment
        2. ‚úÖ The app is automatically published and available for installation
        3. üéØ Add the web part to SharePoint pages as needed
        4. üìã The solution includes multiple web parts: External User Manager, Meeting Room Booking, Inventory Product Catalog, Timesheet Management, and AI-Powered FAQ
        
        ### Deployment Logs
        Check the workflow logs above for detailed deployment information and any additional output.
        "@
            
            Write-Host $deploymentSummary
            
            # Add to GitHub step summary
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $deploymentSummary
            
          } else {
            throw "Failed to deploy package to app catalog - no app object returned"
          }
          
        } catch {
          Write-Host ""
          Write-Host "=============================================="
          Write-Host "‚ùå DEPLOYMENT FAILED"
          Write-Host "=============================================="
          Write-Host "Error: $($_.Exception.Message)"
          Write-Host "Workflow Run: ${{ github.run_number }}"
          Write-Host "Commit SHA: ${{ github.sha }}"
          Write-Host "Failed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          Write-Host "SharePoint URL: $env:SPO_URL"
          Write-Host "=============================================="
          
          $errorSummary = @"
        ## ‚ùå SPFx Solution Deployment Failed
        
        **Status**: ‚ùå **FAILED**
        
        ### Error Details
        - **Error**: $($_.Exception.Message)
        - **SharePoint URL**: $env:SPO_URL
        - **Workflow Run**: ${{ github.run_number }}
        - **Commit SHA**: ${{ github.sha }}
        - **Failed at**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        
        ### Troubleshooting
        1. üîç Check the workflow logs above for detailed error information
        2. üîê Verify that repository secrets (SPO_URL, SPO_USERNAME, SPO_PASSWORD) are correctly configured
        3. üìã Ensure the SharePoint account has sufficient permissions for App Catalog management
        4. üåê Confirm that the SharePoint tenant URL is accessible and correct
        5. üîÑ Try running the deployment again if this was a temporary issue
        
        ### Repository Secrets Required
        - **SPO_URL**: SharePoint tenant URL (e.g., https://turqoisecms-admin.sharepoint.com)
        - **SPO_USERNAME**: SharePoint admin username
        - **SPO_PASSWORD**: SharePoint admin password (use app password if MFA enabled)
        "@
          
          Write-Host $errorSummary
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $errorSummary
          
          exit 1
        } finally {
          # Disconnect from SharePoint
          try {
            Disconnect-PnPOnline
            Write-Host "Disconnected from SharePoint Online"
          } catch {
            Write-Host "Warning: Could not disconnect cleanly from SharePoint"
          }
        }
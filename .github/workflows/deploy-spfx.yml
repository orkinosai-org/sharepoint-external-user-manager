# GitHub Actions Workflow for SharePoint Framework Solution Deployment
# 
# This workflow builds and deploys the SPFx solution to SharePoint App Catalog
# Triggered on every push to the main branch
#
# Required Repository Secrets:
# - SPO_URL: SharePoint tenant URL (e.g., https://contoso.sharepoint.com)
# - SPO_USERNAME: SharePoint admin username (e.g., admin@contoso.onmicrosoft.com)  
# - SPO_PASSWORD: SharePoint admin password (use app password if MFA is enabled)
#
# The workflow performs the following steps:
# 1. Build: Install dependencies, build and package the SPFx solution
# 2. Deploy: Upload .sppkg file to tenant app catalog and publish it
#
# Note: Ensure the user account has SharePoint administrator privileges
# and can access the tenant app catalog

name: Deploy SPFx Solution to SharePoint

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18.x'

jobs:
  build:
    name: Build SPFx Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing npm dependencies..."
        npm ci
        
    - name: Build solution
      run: |
        echo "Building SPFx solution..."
        npm run build
        
    - name: Package solution
      run: |
        echo "Packaging SPFx solution for deployment..."
        npm run package-solution
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spfx-package
        path: sharepoint/solution/*.sppkg
        retention-days: 30

  deploy:
    name: Deploy to SharePoint App Catalog
    runs-on: ubuntu-latest
    needs: build
    environment: production # Requires approval for production deployment
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: spfx-package
        path: ./solution
        
    - name: Install PnP PowerShell
      shell: pwsh
      run: |
        Write-Host "Installing PnP PowerShell module..."
        Install-Module -Name PnP.PowerShell -Force -Scope CurrentUser -AllowClobber
        
    - name: Deploy to SharePoint App Catalog
      shell: pwsh
      env:
        SPO_URL: ${{ secrets.SPO_URL }}
        SPO_USERNAME: ${{ secrets.SPO_USERNAME }}
        SPO_PASSWORD: ${{ secrets.SPO_PASSWORD }}
      run: |
        try {
          Write-Host "Connecting to SharePoint Online..."
          
          # Convert password to secure string
          $securePassword = ConvertTo-SecureString $env:SPO_PASSWORD -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential($env:SPO_USERNAME, $securePassword)
          
          # Connect to SharePoint Online
          Connect-PnPOnline -Url $env:SPO_URL -Credentials $credentials
          
          # Find the .sppkg file
          $packageFile = Get-ChildItem -Path "./solution" -Filter "*.sppkg" | Select-Object -First 1
          
          if (-not $packageFile) {
            throw "No .sppkg file found in solution directory"
          }
          
          Write-Host "Found package file: $($packageFile.Name)"
          
          # Upload and publish the app
          Write-Host "Uploading package to app catalog..."
          $app = Add-PnPApp -Path $packageFile.FullName -Publish -Overwrite
          
          if ($app) {
            Write-Host "‚úÖ Successfully deployed $($packageFile.Name) to SharePoint App Catalog"
            Write-Host "App ID: $($app.Id)"
            Write-Host "App Title: $($app.Title)"
            
            # Set deployment summary
            $deploymentSummary = @"
        ## üöÄ Deployment Summary
        
        **Status**: ‚úÖ Success
        **Package**: $($packageFile.Name)
        **App ID**: $($app.Id)
        **App Title**: $($app.Title)
        **Deployed to**: $env:SPO_URL
        **Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        
        The SPFx solution has been successfully uploaded to the SharePoint App Catalog and is ready for use.
        "@
            
            Write-Host $deploymentSummary
            
            # Add to GitHub step summary
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $deploymentSummary
            
          } else {
            throw "Failed to deploy package to app catalog"
          }
          
        } catch {
          Write-Host "‚ùå Deployment failed: $($_.Exception.Message)"
          
          $errorSummary = @"
        ## ‚ùå Deployment Failed
        
        **Error**: $($_.Exception.Message)
        **Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        
        Please check the workflow logs for detailed error information.
        "@
          
          Write-Host $errorSummary
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $errorSummary
          
          exit 1
        } finally {
          # Disconnect from SharePoint
          try {
            Disconnect-PnPOnline
            Write-Host "Disconnected from SharePoint Online"
          } catch {
            Write-Host "Warning: Could not disconnect cleanly from SharePoint"
          }
        }